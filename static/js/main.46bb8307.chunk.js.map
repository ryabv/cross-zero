{"version":3,"sources":["components/Cell/Cell.tsx","consts.ts","utils.ts","store/actions.ts","components/Layout/Layout.tsx","components/App/App.tsx","store/reducer.ts","store/index.ts","index.tsx"],"names":["cnCell","cn","Cell","props","useState","player","setPlayer","className","activePlayer","row","col","handleChangeMap","toggleRestart","useEffect","handleClick","useCallback","type","onClick","filled","style","width","height","getInitState","cellSize","map","createMap","getCount","document","documentElement","clientHeight","clientWidth","winCount","Number","prompt","viewportSize","Math","floor","rows","cols","i","j","push","checkWin","rowLength","length","count","winRow","mapLength","winCol","colLength","currCol","currRow","winDiagonal","cnLayout","Layout","x","y","counts","setCounts","useSelector","state","dispatch","useDispatch","payload","changeMap","handleResize","callback","wait","immediate","timeout","initialCall","callNow","next","apply","arguments","setTimeout","throttle","window","addEventListener","removeEventListener","cells","key","addCells","App","Player","store","createStore","CROSS","action","won","alert","ZERO","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.46bb8307.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport './Cell.scss';\r\nimport { cn } from '@bem-react/classname';\r\nimport { Player } from '../../store/reducer';\r\nimport { CELL_SIZE } from '../../consts';\r\nimport { ChangeMapPayload } from '../../store/actions';\r\n\r\ninterface IProps {\r\n    className?: string;\r\n    activePlayer: Player;\r\n    row: number;\r\n    col: number;\r\n    handleChangeMap: (payload: ChangeMapPayload) => void;\r\n    toggleRestart: boolean;\r\n}\r\n\r\nconst cnCell = cn('cell');\r\n\r\nconst Cell = function(props: IProps) {\r\n    const [player, setPlayer] = useState('');\r\n    const { className, activePlayer, row, col, handleChangeMap, toggleRestart } = props;\r\n\r\n    useEffect(() => {\r\n        setPlayer('');\r\n    }, [toggleRestart]);\r\n    \r\n    const handleClick = useCallback(() => {\r\n        if (!player) {\r\n            handleChangeMap({ row, col, type: activePlayer });\r\n            setPlayer(activePlayer);\r\n        }\r\n    }, [player, activePlayer, handleChangeMap, col, row]);\r\n\r\n    return (\r\n        <td\r\n            onClick={handleClick}\r\n            className={cnCell({filled: player}, [className])}\r\n            style={{\r\n                width: CELL_SIZE,\r\n                height: CELL_SIZE,\r\n            }}\r\n        ></td>\r\n    );\r\n};\r\n\r\nexport default Cell;\r\n","export const CELL_SIZE = 50;\r\n","import { Player } from \"./store/reducer\";\r\n\r\nexport const getInitState = (activePlayer: Player, cellSize: number) => ({\r\n    activePlayer,\r\n    map: createMap(\r\n        getCount(document.documentElement.clientHeight, cellSize),\r\n        getCount(document.documentElement.clientWidth, cellSize),\r\n    ),\r\n    toggleRestart: false,\r\n    winCount: Number(prompt('Сколько символов подряд нужно для победы:', '3')),\r\n});\r\n\r\nexport function getCount (viewportSize: number, cellSize: number) {\r\n    return Math.floor(viewportSize / cellSize);\r\n};\r\n\r\nexport function throttle(callback: () => void, wait: number, immediate = false) {\r\n    let timeout: ReturnType<typeof setTimeout> | null = null;\r\n    let initialCall = true;\r\n    \r\n    return function() {\r\n        const callNow = immediate && initialCall;\r\n        const next = () => {\r\n            callback.apply(this, arguments);\r\n            timeout = null;\r\n        };\r\n        \r\n        if (callNow) { \r\n            initialCall = false;\r\n            next();\r\n        }\r\n    \r\n        if (!timeout) {\r\n            timeout = setTimeout(next, wait);\r\n        }\r\n    }\r\n};\r\n\r\nexport function createMap(rows: number, cols: number) {\r\n    const map = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < cols; j++) {\r\n            row.push(null);\r\n        }\r\n        map.push(row);\r\n    }\r\n\r\n    return map;\r\n};\r\n\r\nexport function winRow(row: Array<string | null>, winCount: number, activePlayer: string) {\r\n    const rowLength = row.length;\r\n    let count = 0;\r\n\r\n    for (let col = 0; col < rowLength; col++) {\r\n        if (row[col] === activePlayer) {\r\n            count++;\r\n            \r\n            if (count >= winCount) {\r\n                return true;\r\n            }\r\n        } else {\r\n            count = 0;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport function winCol(map: Array<Array<string | null>>, col: number, winCount: number, activePlayer: string) {\r\n    const mapLength = map.length;\r\n    let count = 0;\r\n\r\n    for (let row = 0; row < mapLength; row++) {\r\n        \r\n        if (map[row][col] === activePlayer) {\r\n            count++;\r\n\r\n            if (count >= winCount) {\r\n                return true;\r\n            }\r\n        } else {\r\n            count = 0;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport function winDiagonal(map: Array<Array<string | null>>, winCount: number, activePlayer: string) {\r\n    const rowLength = map.length;\r\n    const colLength = map[0].length;\r\n    let count = 0;\r\n\r\n    // left-top to right-bottom\r\n    for (let col = 0; col < colLength; col++) {\r\n        let currCol = col;\r\n        for (let row = 0; row < rowLength; row++) {\r\n            if (currCol === colLength - 1) {\r\n                break;\r\n            }\r\n\r\n            if (map[row][currCol] === activePlayer) {\r\n                count++;\r\n\r\n                if (count >= winCount) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                count = 0;\r\n            }\r\n            currCol++;\r\n        }\r\n    }\r\n\r\n    for (let row = 0; row < rowLength; row++) {\r\n        let currRow = row;\r\n        for (let col = 0; col < colLength; col++) {\r\n            if (currRow === rowLength - 1) {\r\n                break;\r\n            }\r\n\r\n            if (map[currRow][col] === activePlayer) {\r\n                count++;\r\n\r\n                if (count >= winCount) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                count = 0;\r\n            }\r\n            currRow++;\r\n        }\r\n    }\r\n\r\n    // right-top to left-bottom\r\n    for (let col = 0; col < colLength; col++) {\r\n        let currCol = col;\r\n        for (let row = 0; row < rowLength; row++) {\r\n            if (currCol < 0) {\r\n                break;\r\n            }\r\n\r\n            if (map[row][currCol] === activePlayer) {\r\n                count++;\r\n\r\n                if (count >= winCount) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                count = 0;\r\n            }\r\n\r\n            currCol--;\r\n        }\r\n    }\r\n\r\n    for (let row = 0; row < rowLength; row++) {\r\n        let currRow = row;\r\n        for (let col = colLength - 1; col >= 0; col--) {\r\n            if (currRow === rowLength - 1) {\r\n                break;\r\n            }\r\n\r\n            if (map[currRow][col] === activePlayer) {\r\n                count++;\r\n\r\n                if (count >= winCount) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                count = 0;\r\n            }\r\n            currRow++;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n\r\nexport function checkWin(map: Array<Array<string | null>>, row: Array<string | null>, col: number, winCount: number, activePlayer: string) {\r\n    return (\r\n        winRow(row, winCount, activePlayer) ||\r\n        winCol(map, col, winCount, activePlayer) ||\r\n        winDiagonal(map, winCount, activePlayer)\r\n    );\r\n};","export const CHANGE_MAP = 'CHANGE_MAP';\r\n\r\nexport interface IChangeMap {\r\n    type: typeof CHANGE_MAP,\r\n    payload: ChangeMapPayload,\r\n};\r\n\r\nexport type ChangeMapPayload = {\r\n    col: number;\r\n    row: number;\r\n    type: string;\r\n};\r\n\r\n\r\nexport const changeMap = (payload: ChangeMapPayload) => ({\r\n    type: CHANGE_MAP,\r\n    payload,\r\n});\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport './Layout.scss';\r\nimport { cn } from '@bem-react/classname';\r\nimport Cell from '../Cell/Cell';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../store';\r\nimport { getCount, throttle } from '../../utils';\r\nimport { CELL_SIZE } from '../../consts';\r\nimport { changeMap, ChangeMapPayload } from '../../store/actions';\r\n\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nconst cnLayout = cn('layout');\r\n\r\nconst Layout = function(props: IProps) {\r\n\r\n    const [counts, setCounts] = useState({\r\n        x: getCount(document.documentElement.clientWidth, CELL_SIZE),\r\n        y: getCount(document.documentElement.clientHeight, CELL_SIZE),\r\n    });\r\n    const { activePlayer, toggleRestart } = useSelector((state: State) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChangeMap = useCallback((payload: ChangeMapPayload) => {\r\n        dispatch(changeMap(payload));\r\n    }, [dispatch]);\r\n\r\n    const handleResize = useCallback(\r\n        throttle(() => {\r\n            setCounts({\r\n                x: getCount(document.documentElement.clientWidth, CELL_SIZE),\r\n                y: getCount(document.documentElement.clientHeight, CELL_SIZE),\r\n            })\r\n        }, 300),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, [handleResize]);\r\n\r\n    function addCells(): React.ReactNode {\r\n        const rows = [];\r\n\r\n        for (let row = 0; row < counts.y; row++) {\r\n            const cells = [];\r\n\r\n            for (let col = 0; col < counts.x; col++) {\r\n                cells.push(\r\n                    <Cell\r\n                        key={col}\r\n                        row={row}\r\n                        col={col}\r\n                        toggleRestart={toggleRestart}\r\n                        handleChangeMap={handleChangeMap}\r\n                        activePlayer={activePlayer}\r\n                        className={cnLayout('cell')}\r\n                    />\r\n                );\r\n            }\r\n\r\n            rows.push(\r\n                <tr key={row}>\r\n                    {cells}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    return (\r\n        <table\r\n            className={cnLayout()}\r\n            style={{\r\n                width: (CELL_SIZE * counts.x) + CELL_SIZE,\r\n                height: (CELL_SIZE * counts.y) + CELL_SIZE,\r\n            }}\r\n        >\r\n            <tbody>\r\n                {addCells()}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\nimport Layout from '../Layout/Layout';\n\nfunction App() {\n  return (\n    <div>\n      <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","import { checkWin, getInitState } from '../utils';\r\nimport { CELL_SIZE } from '../consts';\r\nimport { IChangeMap, CHANGE_MAP } from './actions';\r\n\r\n\r\n\r\nexport enum Player {\r\n    CROSS = 'cross',\r\n    ZERO = 'zero',\r\n};\r\n\r\nexport const reducer = (state = getInitState(Player.CROSS, CELL_SIZE), action: IChangeMap) => {\r\n    switch (action.type) {\r\n        case CHANGE_MAP:\r\n            const map = [...state.map];\r\n            const { row, col, type } = action.payload;\r\n            const { activePlayer, winCount, toggleRestart } = state;\r\n            map[row][col] = type;\r\n\r\n            const won = checkWin(map, map[row], col, winCount, activePlayer);\r\n\r\n            if (won) {\r\n                alert(activePlayer + ' won!');\r\n                return {...getInitState(Player.CROSS, CELL_SIZE), toggleRestart: !toggleRestart};\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                map,\r\n                activePlayer: activePlayer === Player.CROSS ? Player.ZERO : Player.CROSS,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore } from 'redux';\r\nimport { reducer } from './reducer';\r\n\r\nexport type State = ReturnType<typeof reducer>;\r\nexport const store = createStore(reducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}